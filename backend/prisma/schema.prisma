// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  passwordHash String    @map("password_hash")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  // Relations
  vehicles     Vehicle[]
  
  @@map("users")
}

model Vehicle {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  title        String
  slug         String    @unique
  price        Float
  year         Int
  mileageKm    Int       @map("mileage_km")
  transmission String
  fuel         String
  color        String
  location     String
  description  String    @db.Text
  plate        String?   // Campo de placa (opcional, visível só para vendedor)
  status       VehicleStatus @default(ACTIVE)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  images       VehicleImage[]
  leads        Lead[]
  
  @@map("vehicles")
}

model VehicleImage {
  id        String   @id @default(cuid())
  vehicleId String   @map("vehicle_id")
  url       String
  position  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  
  @@map("vehicle_images")
}

model Lead {
  id          String   @id @default(cuid())
  vehicleId   String   @map("vehicle_id")
  clientName  String?  @map("client_name")
  referrer    String?
  utmSource   String?  @map("utm_source")
  utmMedium   String?  @map("utm_medium")
  utmCampaign String?  @map("utm_campaign")
  ipHashed    String?  @map("ip_hashed")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  
  @@map("leads")
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
  SOLD
}
